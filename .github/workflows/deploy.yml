name: CI/CD - EC2 App Deployment

on:
  push:
    branches:
      - main
    tags:
      - deploy-*
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage to deploy (dev/prod)'
        required: true
        default: 'dev'

jobs:
  deploy:
    name: Deploy App
    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout repository
        uses: actions/checkout@v3

      - name: üìù Show repo structure
        run: ls -R

      - name: üîë Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: ‚òÅÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: üõ†Ô∏è Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: üî∑ Terraform Init
        run: |
          cd ec2-automation/terraform
          terraform init

      - name: üî∑ Terraform Apply
        run: |
          cd ec2-automation/terraform
          terraform apply -auto-approve -var-file="${{ github.event.inputs.stage || 'dev' }}.tfvars"

      - name: üåê Get EC2 Public IP
        id: get_ec2_ip
        run: |
          cd ec2-automation/terraform
          ip=$(terraform output -raw instance_public_ip 2>/dev/null | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
          echo "‚úÖ EC2 Public IP: $ip"
          echo "EC2_IP=$ip" >> $GITHUB_ENV


      - name: ‚è≥ Wait for SSH
        run: |
          echo "Waiting for SSH to $EC2_IP..."
          for i in {1..10}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/id_rsa ubuntu@$EC2_IP 'echo SSH ready'; then
              echo "‚úÖ SSH is ready"
              exit 0
            fi
            echo "‚è≥ Waiting for SSH..."
            sleep 10
          done
          echo "‚ùå SSH failed after waiting"
          exit 1
        env:
          EC2_IP: ${{ env.ec2_ip }}

      - name: üöÄ Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_IP "cd ~/ec2-automation && bash main.sh ${{ github.event.inputs.stage || 'dev' }}"
        env:
          EC2_IP: ${{ env.ec2_ip }}

      - name: ü©∑ Validate Health
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_IP:80)
            if [ "$STATUS" == "200" ]; then
              echo "‚úÖ App is healthy"
              exit 0
            else
              echo "Waiting for app to become healthy... ($STATUS)"
              sleep 10
            fi
          done
          echo "‚ùå App failed health check"
          exit 1
        env:
          EC2_IP: ${{ env.ec2_ip }}
