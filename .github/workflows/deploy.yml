name: CI/CD - EC2 App Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage to deploy (dev/prod)'
        required: false
        default: 'dev'

jobs:
  deploy:
    runs-on: self-hosted

    env:
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: ‚úÖ Checkout repository
        uses: actions/checkout@v3

      - name: üìù Show repo structure
        run: ls -R

      - name: ‚úÖ Set up SSH key
        shell: powershell
        run: |
          if (!(Test-Path -Path $env:USERPROFILE\.ssh)) {
           New-Item -ItemType Directory -Path $env:USERPROFILE\.ssh
          }

          try {
           Remove-Item -Path $env:USERPROFILE\.ssh\id_rsa -Force -ErrorAction SilentlyContinue
          } catch {}

           Set-Content -Path $env:USERPROFILE\.ssh\id_rsa -Value "${{ secrets.EC2_SSH_KEY }}" -Force

           icacls $env:USERPROFILE\.ssh\id_rsa /inheritance:r /grant:r "$($env:USERNAME):R"


      - name: üåç Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: ‚öíÔ∏è Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: üåÄ Terraform Init
        run: |
          cd ec2-automation/terraform
          terraform init

      - name: üöß Terraform Apply
        run: |
          cd ec2-automation/terraform
          terraform apply -auto-approve -var-file="${{ github.event.inputs.stage }}.tfvars"

      - name: üåê Get EC2 Public IP
        id: get_ec2_ip
        shell: pwsh
        run: |
          cd ec2-automation/terraform
          Write-Output "==> Running: terraform output -raw instance_public_ip"
          $IP = terraform output -raw instance_public_ip
          Write-Output "‚úÖ Extracted EC2 IP: $IP"
          echo "ip=$IP" >> $env:GITHUB_OUTPUT



      - name: ‚è≥ Wait for SSH to be ready
        run: |
          EC2_IP="${{ steps.get_ec2_ip.outputs.ip }}"
          echo "Waiting for SSH on $EC2_IP..."
          for i in {1..15}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/id_rsa ubuntu@$EC2_IP 'echo SSH ready'; then
              echo "‚úÖ SSH is ready"
              exit 0
            fi
            echo "‚åõ attempt $i: still waiting..."
            sleep 10
          done
          echo "‚ùå SSH failed after waiting"
          exit 1

      - name: üöÄ Run deployment script on EC2
        run: |
          EC2_IP="${{ steps.get_ec2_ip.outputs.ip }}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_IP \
            "cd ~/ec2-automation && bash main.sh ${{ github.event.inputs.stage }}"

      - name: ü©∑ Validate app health
        run: |
          EC2_IP="${{ steps.get_ec2_ip.outputs.ip }}"
          echo "Checking app at http://$EC2_IP:80..."
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_IP:80)
            if [ "$STATUS" == "200" ]; then
              echo "‚úÖ App is healthy"
              exit 0
            fi
            echo "Waiting for app to become healthy... (HTTP $STATUS)"
            sleep 10
          done
          echo "‚ùå App failed health check"
          exit 1
