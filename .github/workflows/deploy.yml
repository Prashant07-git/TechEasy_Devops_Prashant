name: CI/CD - EC2 App Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage to deploy (dev/prod)'
        required: true
        default: 'dev'

jobs:
  deploy:
    name: 🚀 Deploy App
    runs-on: [self-hosted, Windows, X64]

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v3

      - name: "✅ Debug: Show repo structure"
        run: ls -R

      - name: 🔷 Debug existing file
        shell: pwsh
        run: |
          if (Test-Path -Path "$env:USERPROFILE\.ssh\id_rsa") {
            Get-Acl "$env:USERPROFILE\.ssh\id_rsa" | Format-List
          } else {
            Write-Output "id_rsa does not exist"
          }


      - name: 🧪 Set up SSH key
        shell: pwsh
        run: |
          $sshPath = "$env:USERPROFILE\.ssh"
          $keyPath = "$sshPath\id_rsa"

          if (-not (Test-Path -Path $sshPath)) {
              Write-Output "🔷 Creating .ssh directory"
              New-Item -ItemType Directory -Path $sshPath
          }

          if (-not (Test-Path -Path $keyPath)) {
              Write-Output "🔷 Writing new SSH key"
              Set-Content -Path $keyPath -Value "${{ secrets.EC2_SSH_KEY }}" -Force

              Write-Output "🔷 Setting permissions"
              icacls $keyPath /inheritance:r /grant:r "$($env:USERNAME):R"
          } else {
              Write-Output "✅ SSH key already exists. Skipping."
          }

      - name: ✅ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: ✅ Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: 🔷 Terraform Init
        run: |
          cd ec2-automation/terraform
          terraform init

      - name: 🔷 Terraform Apply
        run: |
          cd ec2-automation/terraform
          terraform apply -auto-approve -var-file="${{ github.event.inputs.stage || 'dev' }}.tfvars"

      - name: 🌐 Get EC2 Public IP
        id: get_ec2_ip
        shell: pwsh
        run: |
          cd ec2-automation/terraform
          Write-Output "==> Running: terraform output -raw instance_public_ip"
          $IP = terraform output -raw instance_public_ip
          Write-Output "✅ Extracted EC2 IP: $IP"
          echo "ip=$IP" >> $env:GITHUB_OUTPUT

      - name: 🕒 Wait for SSH
        shell: pwsh
        run: |
          $EC2_IP = "${{ steps.get_ec2_ip.outputs.ip }}"
          Write-Output "👉 EC2_IP resolved to: $EC2_IP"
          Write-Output "Waiting for SSH on $EC2_IP..."
          for ($i = 1; $i -le 15; $i++) {
            if (Test-Connection -ComputerName $EC2_IP -Quiet -Count 1) {
              Write-Output "✅ SSH is ready"
              exit 0
            }
            Write-Output "⌛ attempt $i: still waiting..."
            Start-Sleep -Seconds 10
          }
          Write-Error "❌ SSH failed after waiting"
