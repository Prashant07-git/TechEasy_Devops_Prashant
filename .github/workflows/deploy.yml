name: CI/CD - EC2 App Deployment

on:
  push:
    branches:
      - main
    tags:
      - deploy-*
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage to deploy (dev/prod)'
        required: true
        default: 'dev'

jobs:
  deploy:
    name: Deploy App
    runs-on: ubuntu-latest

    steps:
      - name: üìÅ Checkout repository
        uses: actions/checkout@v3

      - name: üß™ Debug: Show repo structure
        run: ls -R

      - name: üîê Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: üß∞ Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: üì¶ Terraform Init
        run: cd ec2-automation/terraform && terraform init

      - name: üßπ Terraform Destroy (to clean up any previous run)
        run: |
          cd ec2-automation/terraform
          terraform destroy -auto-approve -var-file="${{ github.event.inputs.stage || 'dev' }}.tfvars"

      - name: üöÄ Terraform Apply
        run: |
          cd ec2-automation/terraform
          terraform apply -auto-approve -var-file="${{ github.event.inputs.stage || 'dev' }}.tfvars"

      - name: üåê Get EC2 Public IP
        id: ec2_ip
        run: |
          cd ec2-automation/terraform
          echo "EC2_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      - name: ‚è≥ Wait for EC2 SSH
        run: |
          for i in {1..10}; do
            if ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_IP 'echo SSH ready'; then
              echo "‚úÖ SSH ready"
              break
            else
              echo "Waiting for SSH to be ready..."
              sleep 10
            fi
          done

      - name: üìÑ Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_IP \
            "cd ~/ec2-automation && bash main.sh ${{ github.event.inputs.stage || 'dev' }}"

      - name: ‚ù§Ô∏è Validate Health
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_IP:80)
            if [ "$STATUS" == "200" ]; then
              echo "‚úÖ App is healthy"
              exit 0
            else
              echo "Waiting for app to become healthy... ($STATUS)"
              sleep 10
            fi
          done
          echo "‚ùå App failed health check"
          exit 1
